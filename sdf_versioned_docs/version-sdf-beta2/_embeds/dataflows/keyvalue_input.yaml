apiVersion: 0.5.0

meta:
  name: key-value-type
  version: 0.1.0
  namespace: example

config:
  converter: json
  consumer:
    default_starting_offset:
      value: 0
      position: End

types:
  student-info:
    type: object
    properties:
      age:
        type: u32
      teacher:
        type: string
      grade:
        type: f32
  student-in-class:
    type: object
    properties:
      name:
        type: string
      grade:
        type: f32

topics:
  student-list:
    schema:
      key:
        type: string
      value:
        type: student-info
  profx-students:
    schema:
      value:
        type: student-in-class

services:
  filter-profx:
    sources:
      - type: topic
        id: student-list

    transforms:
      - operator: filter-map
        run: |
          fn student_filter(name: Option<String>, info: StudentInfo) -> Result<Option<StudentInClass>>{
            if info.teacher != "profX" {
                return Ok(None);
            }
            let ret = StudentInClass{
                name: name.unwrap_or("".to_string()),
                grade: info.grade
            };
            Ok(Some(ret))
          }

    sinks:
      - type: topic
        id: profx-students